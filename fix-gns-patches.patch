diff --git a/src/steamnetworkingsockets/steamnetworkingsockets_internal.h b/src/steamnetworkingsockets/steamnetworkingsockets_internal.h
index 50dba23..89a58b4 100644
--- a/src/steamnetworkingsockets/steamnetworkingsockets_internal.h
+++ b/src/steamnetworkingsockets/steamnetworkingsockets_internal.h
@@ -29,6 +29,8 @@
 
 #include <tier0/memdbgon.h>
 
+#include <string>
+
 #ifdef STEAMNETWORKINGSOCKETS_ENABLE_MEM_OVERRIDE
 	#define STEAMNETWORKINGSOCKETS_DECLARE_CLASS_OPERATOR_NEW \
 		static void* operator new( size_t s ) noexcept { return malloc( s ); } \
@@ -670,7 +672,7 @@ extern bool BSteamNetworkingIdentityToProtobufInternal( const SteamNetworkingIde
 #define SteamNetworkingIdentityToProtobuf( identity, msg, field_identity_string, field_identity_legacy_binary, field_legacy_steam_id ) \
 	{ SteamDatagramErrMsg identityToProtobufErrMsg; \
 		if ( !BSteamNetworkingIdentityToProtobuf( identity, msg, field_identity_string, field_identity_legacy_binary, field_legacy_steam_id, identityToProtobufErrMsg ) ) { \
-			AssertMsg2( false, "Failed to serialize identity to %s message.  %s", msg.GetTypeName().c_str(), identityToProtobufErrMsg ); \
+			AssertMsg2( false, "Failed to serialize identity to %s message.  %s", std::string(msg.GetTypeName()).c_str(), identityToProtobufErrMsg ); \
 		} \
 	}
 
diff --git a/src/public/tier0/valve_tracelogging.h b/src/public/tier0/valve_tracelogging.h
index bf1d5d9..1e3ff4a 100644
--- a/src/public/tier0/valve_tracelogging.h
+++ b/src/public/tier0/valve_tracelogging.h
@@ -67,7 +67,7 @@
 
 #include "platform.h"
 
-#ifdef _WINDOWS
+#if defined(_WINDOWS) && defined(_MSC_VER)
 
 	// NOTE - for compile consistency, we always include the windows headers, even if tracelogging is not enabled
 
diff --git a/src/common/opensslwrapper.cpp b/src/common/opensslwrapper.cpp
index 23c6fbb..71c8ca0 100644
--- a/src/common/opensslwrapper.cpp
+++ b/src/common/opensslwrapper.cpp
@@ -15,6 +15,12 @@
 #include <openssl/rand.h>
 #include "crypto.h"
 
+#if IsWindows()
+    #include <windows.h>
+#else
+    #include <pthread.h>
+#endif
+
 // Statics - all automatically zero-init
 int COpenSSLWrapper::m_nInstances;
 static std::recursive_mutex *s_pMutexArray;
@@ -138,8 +144,14 @@ void COpenSSLWrapper::OpenSSLLockingCallback( int mode, int type, const char *fi
 //-----------------------------------------------------------------------------
 unsigned long COpenSSLWrapper::OpenSSLThreadIDCallback( void )
 {
-	std::hash<std::thread::id> hash;
-	return (unsigned long)hash( std::this_thread::get_id() );
+    // Use pthread_self() instead of std::hash for better compatibility
+    #if IsWindows()
+        return (unsigned long)GetCurrentThreadId();
+    #else
+        // On Unix-like systems, pthread_self() returns pthread_t which we can cast
+        // Note: This assumes pthread_t can be safely cast to unsigned long
+        return (unsigned long)pthread_self();
+    #endif
 }
 
 
diff --git a/CMakeLists.txt b/CMakeLists.txt
index 9796b83..7408163 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -57,6 +57,19 @@ if(CMAKE_CXX_COMPILER_ID MATCHES "MSVC")
 	print_default_msvc_flags()
 endif()
 
+# Warning suppression
+if(APPLE)
+        add_compile_options(
+            -Wno-all
+            -Wno-extra
+            -Wno-pedantic
+            -Wno-nullability-extension
+            -Wno-invalid-utf8
+            -Wno-deprecated-declarations
+            -Wno-unused-command-line-argument
+        )
+endif()
+
 #
 # Primary crypto library (for AES, SHA256, etc)
 #
